#!/usr/local/bin/perl
###########################################
# Build ppm balls for Log4perl and all of 
# its dependencies
# Mike Schilli, 2002 (m@perlmeister.com)
###########################################
use warnings;
use strict;

use LWP::Simple;
use File::Basename;
use File::Path;
use File::Copy;
use Log::Log4perl qw(:easy);
use PPM::Make;

Log::Log4perl->easy_init({level   => $DEBUG,
                          file    => 'stdout',
                          layout  => '%m%n',
                         });

my $PPM_DIR  = "ppm";
my $TAR      = "tar";
my $GZIP     = "gzip";

if(-d $PPM_DIR) {
    rmtree $PPM_DIR or LOGDIE("Cannot delete $PPM_DIR");
}

my ($log4perl_tarball) = <../Log-Log4perl-*.tar.gz>;
LOGDIE("No tarball for Log4perl found") unless defined $log4perl_tarball;

mkdir $PPM_DIR, 0755 or LOGDIE("Cannot mkdir $PPM_DIR");
ppm_make("Log::Log4perl", $log4perl_tarball);

###########################################
sub ppm_make {
###########################################
    my($module, $file) = @_;

    DEBUG("ppm_make $module $file");

    (my $mod_dir = $module) =~ s/::/-/g;

    my @files = ();

    open PIPE, "$TAR ztf $file |" or LOGDIE("Can't open $TAR ($!)");
    while(<PIPE>) {
        chomp;
        push @files, $_;
    }
    close PIPE or LOGDIE("Can't untar $file ($!)");

    DEBUG("Archive contains ", scalar @files, " files");

    (my $topdir = $files[0]) =~ s#/.*##;

    if(-d $topdir) {
        rmtree $topdir or LOGDIE("Cannot delete $topdir");
    }

    DEBUG("Unpacking $file");

    system("$TAR zxf $file") and LOGDIE("Cannot untar $file");

    DEBUG("$topdir ready");

    chdir $topdir or LOGDIE("Cannot chdir to $topdir");

    patch_log_dispatch() if $topdir =~ /Log-Dispatch/;

    my $ppm = PPM::Make->new(os   => "", 
                             arch => "",
                             vs   => 1,
                             no_remote_lookup => 1,
                            );
    $ppm->make_ppm();

    my $ppd_file = glob "$mod_dir-*.ppd";
    my $tar_file = glob "$mod_dir-*.tar.gz";

    fix_ppd($ppd_file);

    copy($ppd_file, "../$PPM_DIR/$mod_dir.ppd") or die "Cannot copy $ppd_file";
    copy("$tar_file", "../$PPM_DIR/$mod_dir.tar.gz") or 
        die "Cannot copy $tar_file";

    chdir ".." or LOGDIE("Cannot chdir to ..");

    rmtree $topdir or die "Can't delete $topdir";
    #unlink $file;

    1;
}

###########################################
sub fix_ppd {
###########################################
    my($ppd_file) = @_;

    open FILE, '<', "$ppd_file" or die "Cannot open $ppd_file";
    my $data = join '', <FILE>;
    $data =~ s/-\d+\.\d+//g;
    close FILE;

    open FILE, '>', "$ppd_file" or die "Cannot open $ppd_file";
    print FILE $data;
    close FILE;
}

###########################################
sub patch_log_dispatch {
###########################################

    # Get rid of Log::Dispatch's annoying user prompting

    open FILE, '<', "Makefile.PL" or die "Cannot open Makefile.PL";
    my $data = join '', <FILE>;
    close FILE;

    $data =~ s/use ExtUtils.*/
               use ExtUtils::MakeMaker qw(WriteMakefile); 
               sub prompt { return \$_[1] }
              /;
    $data =~ s/while\s*\(\s*1\s*\)/while(0)/;

    open FILE, '>', "Makefile.PL" or die "Cannot open Makefile.PL (w)";
    print FILE $data;
    close FILE;
}
